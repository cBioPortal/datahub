# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:2.7
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/ , e.g.:
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements_py" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            sudo pip install -r requirements_py
            wget https://github.com/git-lfs/git-lfs/releases/download/v2.3.4/git-lfs-linux-amd64-2.3.4.tar.gz
            tar -xvf git-lfs-linux-amd64-2.3.4.tar.gz
            cd git-lfs-2.3.4
            sudo ./install.sh
            cd ~/repo
            sudo chown -R circleci .git
            git lfs install --skip-smudge

      - save_cache:
          paths:
          - ./venv
          key: v1-dependencies-{{ checksum "requirements_py" }}
        
      # run tests!
      - run:
          name: run tests
          command: |
            git remote add upstream git@github.com:cbioportal/datahub.git
            # TODO - taking validator from feature branch now, change to take it from upstream / master later:
            git clone https://github.com/thehyve/cbioportal.git
            cd cbioportal
            git fetch origin validating-multiple-studies
            git checkout validating-multiple-studies
            cd ~/repo/.circleci
            # make test reports location:
            mkdir ~/repo/test-reports
            mkdir ~/repo/test-reports/ERRORS
            # run the tests:
            ./run_tests.sh

      - store_artifacts:
          path: test-reports
          destination: test-reports
          
